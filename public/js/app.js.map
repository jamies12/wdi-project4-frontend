{"version":3,"sources":["js/app.js","js/controllers/auth.js","js/models/content.js","js/controllers/main.js","js/router.js","js/models/space.js","js/controllers/spaces.js","js/models/user.js","js/controllers/users.js"],"names":["Auth","$authProvider","API_URL","loginUrl","signupUrl","tokenPrefix","RegisterController","$auth","$state","submit","signup","register","user","then","go","this","LoginController","login","credentials","Content","$resource","id","update","method","MainController","$rootScope","logout","secureState","e","toState","main","menuVisible","message","isAuthenticated","protectedStates","includes","name","preventDefault","toggleMenu","isLoggedIn","$on","Router","$stateProvider","$urlRouterProvider","state","url","templateUrl","controller","otherwise","Space","SpacesIndexController","User","spacesIndex","all","query","get","getPayload","SpacesShowController","spacesShow","space","params","UsersIndexController","usersIndex","angular","module","constant","config","$inject","factory"],"mappings":"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","file":"app.js","sourcesContent":["angular.module('spaces', ['ngResource', 'ui.router', 'satellizer'])\n  .constant('API_URL', 'http://localhost:3000/api')\n  .config(Auth);\n\nAuth.$inject = ['$authProvider', 'API_URL'];\nfunction Auth($authProvider, API_URL) {\n  $authProvider.loginUrl = `${API_URL}/login`;\n  $authProvider.signupUrl = `${API_URL}/register`;\n\n  $authProvider.tokenPrefix = '';\n}\n","angular.module('spaces')\n  .controller('RegisterController', RegisterController)\n  .controller('LoginController', LoginController);\n\nRegisterController.$inject = ['$auth', '$state'];\nfunction RegisterController($auth, $state) {\n  const register = this;\n\n  register.user = {};\n\n  function submit() {\n    $auth.signup(register.user)\n      .then(() => {\n        $state.go('login');\n      });\n  }\n\n  register.submit = submit;\n}\n\nLoginController.$inject = ['$auth', '$state'];\nfunction LoginController($auth, $state) {\n  const login = this;\n\n  login.credentials = {};\n\n  function submit() {\n    $auth.login(login.credentials)\n      .then(() => {\n        $state.go('space');\n      });\n  }\n\n  login.submit = submit;\n}\n","angular.module('spaces')\n  .factory('Content', Content);\n\nContent.$inject = ['$resource', 'API_URL'];\nfunction Content($resource, API_URL) {\n  return new $resource(`${API_URL}/contents/:id`, {id: '@id' }, {\n    update: { method: 'PUT'}\n  });\n}\n","angular.module('spaces')\n  .controller('MainController', MainController);\n\nMainController.$inject = ['$auth', '$state', '$rootScope'];\nfunction MainController($auth, $state, $rootScope) {\n  const main = this;\n  main.isLoggedIn = $auth.isAuthenticated;\n  main.message = null;\n  main.menuVisible = false;\n\n  function logout() {\n    $auth.logout()\n    .then(() => {\n      $state.go('moodIndex');\n    });\n  }\n\n  const protectedStates = ['space', 'usersIndex'];\n  function secureState(e, toState) {\n    main.menuVisible = false;\n    main.message = null;\n\n    if(!$auth.isAuthenticated() && protectedStates.includes(toState.name)) {\n      e.preventDefault();\n      main.message = 'You must be logged in to go there!';\n      $state.go('login');\n    }\n  }\n\n  $rootScope.$on('$stateChangeStart', secureState);\n\n  main.logout = logout;\n\n  function toggleMenu() {\n    main.menuVisible = !main.menuVisible;\n  }\n\n  main.toggleMenu = toggleMenu;\n}\n","angular.module('spaces')\n  .config(Router);\n\nRouter.$inject = ['$stateProvider', '$urlRouterProvider'];\nfunction Router($stateProvider, $urlRouterProvider) {\n  $stateProvider\n    // .state('usersIndex', {\n    //   url: '/users',\n    //   templateUrl: '/templates/usersIndex.html',\n    //   controller: 'UsersIndexController as usersIndex'\n    // })\n    .state('register', {\n      url: '/register',\n      templateUrl: '/templates/register.html',\n      controller: 'RegisterController as register'\n    })\n    .state('login', {\n      url: '/login',\n      templateUrl: '/templates/login.html',\n      controller: 'LoginController as login'\n    })\n    .state('spacesIndex', {\n      url: '/spaces',\n      templateUrl: '/templates/spacesIndex.html',\n      controller: 'SpacesIndexController as spacesIndex'\n    })\n    .state('spacesShow', {\n      url: '/spaces/:id',\n      templateUrl: '/templates/spacesShow.html',\n      controller: 'SpacesShowController as spacesShow'\n    });\n\n  $urlRouterProvider.otherwise('/spaces');\n}\n","angular.module('spaces')\n  .factory('Space', Space);\n\nSpace.$inject = ['$resource', 'API_URL'];\nfunction Space($resource, API_URL) {\n  return new $resource(`${API_URL}/spaces/:id`, {id: '@id' }, {\n    update: { method: 'PUT'}\n  });\n}\n","angular.module('spaces')\n  .controller('SpacesIndexController', SpacesIndexController)\n  .controller('SpacesShowController', SpacesShowController);\n\nSpacesIndexController.$inject = ['Space', 'User', '$auth'];\nfunction SpacesIndexController(Space, User, $auth) {\n  const spacesIndex = this;\n\n  spacesIndex.all = Space.query();\n\n  spacesIndex.user = User.get({ id: $auth.getPayload().id });\n}\n\nSpacesShowController.$inject = ['Space', '$state', '$auth', 'User'];\nfunction SpacesShowController(Space, $state, $auth, User) {\n  const spacesShow = this;\n\n  spacesShow.user = User.get({ id: $auth.getPayload().id });\n  spacesShow.space = Space.get({ id: $state.params.id });\n\n  spacesShow.isLoggedIn = $auth.isAuthenticated;\n}\n\n// function isCurrentUser() {\n//   return $auth.getPayload().id === Number($state.params.id);\n// }\n\n// Room.query(data => {\n//     userAppEdit.rooms = [];\n//     data.forEach(item => {\n//       if (item.user_id === parseInt($auth.getPayload().id)){\n//         userAppEdit.rooms.push(item);\n//       }\n//     });\n//   });\n","angular.module('spaces')\n  .factory('User', User);\n\nUser.$inject = ['$resource', 'API_URL'];\nfunction User($resource, API_URL) {\n  return new $resource(`${API_URL}/users/:id`, { id: '@id' }, {\n    update: { method: 'PUT' }\n  });\n}\n","angular.module('spaces')\n  .controller('UsersIndexController', UsersIndexController);\n\nUsersIndexController.$inject = ['User'];\nfunction UsersIndexController(User) {\n  const usersIndex = this;\n\n  usersIndex.all = User.query();\n}\n"],"sourceRoot":"/source/"}